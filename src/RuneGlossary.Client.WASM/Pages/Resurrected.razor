@page "/"

@using Blazored.Modal
@using Blazored.Modal.Services
@using RuneGlossary.Api
@using RuneGlossary.Client.WASM.Components
@using RuneGlossary.Client.WASM.Modals
@using RuneGlossary.Client.WASM.Models
@using RuneGlossary.Client.WASM.Repositories
@using STrain

@inject IModalService ModalService;
@inject IRequestSender RequestSender;
@inject ICharacterRepository Repository;

<div class="panel main">
    <div class="panel character">
        <div class="character-data">
            <div class="class">
                @if (Character is not null)
                {
                    <button class="previous" @onclick="Previous">@("<")</button>
                    <img class="class" src="assets/classes/@(Character?.Class.Name.ToLower()).gif" />
                    <button class="next" @onclick="Next">@(">")</button>
                }
            </div>
            <div class="character-information">
                <div class="field">
                    <span>Name:</span>
                    <span>@Character?.Name</span>
                </div>
                <div class="field">
                    <span>Level:</span>
                    <span>@Character?.Level</span>
                </div>
            </div>
        </div>
        <div class="rune-list">
            @foreach (var rune in Runes)
            {
                <div class="selector">
                    <input type="checkbox" @value="rune.Selected" />
                    <Rune Model="rune.Value" />
                </div>
            }
        </div>
        <div>
            <button @onclick="AddNewAsync">New</button>
        </div>
    </div>
</div>

@code {
    private int _selected = 0;

    public Character? Character => Characters?.ElementAtOrDefault(_selected);
    public IEnumerable<Character>? Characters { get; set; }

    public IEnumerable<Selector<Api.Rune>> Runes { get; set; } = Enumerable.Empty<Selector<Api.Rune>>();

    protected override async Task OnInitializedAsync()
    {
        Runes = (await RequestSender.GetAsync<GetRunesQuery, IEnumerable<Api.Rune>>(new GetRunesQuery(), default))!
                    .Select(r => new Selector<Api.Rune>(r));
        Characters = await Repository.GetAsync(default);
    }

    public void Next()
    {
        if (Characters is null || (_selected < Characters.Count() - 1))
        {
            _selected++;
            StateHasChanged();
        }
    }

    public void Previous()
    {
        if (_selected > 0) 
        {
            _selected--;
            StateHasChanged();
        }
    }

    public async Task AddNewAsync()
    {

        var id = 0;
        if (Characters is not null && Characters.Any()) id = Characters.Max(c => c.Id) + 1;
        var character = new Character(id);
        var parameters = new ModalParameters()
                                .Add(nameof(NewCharacterModal.Character), character);
        var reference = ModalService.Show<NewCharacterModal>(string.Empty, parameters, new ModalOptions { HideHeader = true, DisableBackgroundCancel = true, HideCloseButton = true, Position = ModalPosition.Middle });
        var result = await reference.Result;
        if (result.Confirmed)
        {
            await Repository.SaveAsync(character, default);
            Characters = await Repository.GetAsync(default);
            _selected = Characters.Count() - 1;
            StateHasChanged();
        }
    }
}
