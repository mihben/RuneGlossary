@page "/"

@using Blazored.Modal
@using Blazored.Modal.Services
@using RuneGlossary.Api
@using RuneGlossary.Api.Responses
@using RuneGlossary.Client.WASM.Components
@using RuneGlossary.Client.WASM.Modals
@using RuneGlossary.Client.WASM.Models
@using RuneGlossary.Client.WASM.Repositories
@using STrain
@using System.Collections.ObjectModel

@inject IModalService ModalService;
@inject IRequestSender RequestSender;
@inject ICharacterRepository Repository;


<div class="panel main">
    <div class="panel character">
        @if (!_isLoading)
        {
            <EditForm class="edit-form" EditContext="@_editContext">
                <div class="character-data">
                    <span class="index">@(_selected + 1)/@(Characters.Count())</span>
                    <div class="class" @onmousewheel="OnMouseWheel">
                        @if (Character is not null)
                        {
                            <button class="previous" @onclick="Previous">@("<")</button>
                            <img class="class" src="assets/classes/@(Character?.Class.Name.ToLower()).png"/>
                            <button class="next" @onclick="Next">@(">")</button>
                        }
                    </div>
                    <div class="character-information">
                        <span class="label" style="grid-area: label-name">Name:</span>
                        <span class="value" style="grid-area: value-name">@Character?.Name</span>
                        <span class="label" style="grid-area: label-level">Level:</span>
                        <div style="display: flex;">
                            <InputNumber style="grid-area: value-level;" @bind-Value="Character.Level"/>
                            <button class="plus" @onclick="IncreaseLevel"/>
                        </div>
                    </div>
                </div>
                <div class="rune-list">
                    @foreach (var rune in Runes)
                    {
                        <div class="selector">
                            <div class="checkbox-container">
                                <InputCheckbox id=@rune.Value.Name @key=rune.Value.Id @bind-Value="rune.Selected"/>
                                <div class="checkbox"/>
                                <label for=@rune.Value.Name />
                            </div>
                            <Rune CharacterLevel="@Character.Level" Model="rune.Value" />
                        </div>
                    }
                </div>
            </EditForm>
        }
        <div class="button-row">
            <button @onclick="AddAsync">New</button>
            <button @onclick="DeleteAsync">Delete</button>
        </div>
    </div>

    <div class="panel filter">
        @if (!_isLoading)
        {
            <EditForm style="display: inherit; grid-template: inherit; grid-template-areas: inherit; grid-template-rows: inherit;" EditContext="@_editContext">
                <div class="item-types">
                    <div class="armors">
                        @foreach (var armor in ItemTypes.Where(it => it.Value.Class.Equals(ItemClass.Armor)))
                        {
                            <div class="selector">
                                <div class="checkbox-container">
                                    <InputCheckbox id=@armor.Value.Name @key=armor.Value.Id @bind-Value="armor.Selected" />
                                    <div class="checkbox" />
                                    <label for=@armor.Value.Name />
                                </div>
                                <span>@armor.Value.Name</span>
                            </div>
                        }
                    </div>
                    <div class="weapons">
                        @foreach (var weapon in ItemTypes.Where(it => it.Value.Class.Equals(ItemClass.Weapon)))
                        {
                            <div class="selector">
                                <div class="checkbox-container">
                                    <InputCheckbox id=@weapon.Value.Name @key=weapon.Value.Id @bind-Value="weapon.Selected" />
                                    <div class="checkbox" />
                                    <label for=@weapon.Value.Name />
                                </div>
                                <span>@weapon.Value.Name</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="static">
                    <span class="label" style="grid-area: label-max-level">Max Level:</span>
                    <InputNumber class="value" style="grid-area: max-level; max-width: 50px;" @bind-Value="Character.Filters.MaxLevel" />
                    <span class="label" style="grid-area: label-socket">Socket Number:</span>
                    <InputNumber class="value" style="grid-area: from; max-width: 50px;" @bind-Value="Character.Filters.SocketFrom" />
                    <span style="grid-area: dash">-</span>
                    <InputNumber class="value" style="grid-area: to; max-width: 50px;" @bind-Value="Character.Filters.SocketTo" />
                </div>
            </EditForm>

            <div class="button-row">
                <button @onclick="SearchAsync">Search</button>
            </div>
        }
    </div>

    <div class="panel result">
        @foreach (var runeWord in RuneWords)
        {
            <RuneWord Model="runeWord"/>
        }
    </div>
</div>

@code {
    private bool _isLoading = false;

    private int _selected = 0;
    private EditContext _editContext;

    public Character? Character => Characters?.ElementAtOrDefault(_selected);
    public IEnumerable<Character>? Characters { get; set; }

    public ObservableCollection<Selector<Api.Rune>> Runes { get; set; } = new ObservableCollection<Selector<Api.Rune>>();
    public IEnumerable<Selector<ItemType>> ItemTypes { get; set; } = Enumerable.Empty<Selector<ItemType>>();

    public IEnumerable<Api.Responses.RuneWord> RuneWords { get; set; } = Enumerable.Empty<Api.Responses.RuneWord>();

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        Runes = new ObservableCollection<Selector<Api.Rune>>((await RequestSender.GetAsync<GetRunesQuery, IEnumerable<Api.Rune>>(new GetRunesQuery(), default))!
                    .Select(r => new Selector<Api.Rune>(r)).ToList());
        ItemTypes = (await RequestSender.GetAsync<GetItemTypesQuery, IEnumerable<ItemType>>(new GetItemTypesQuery(), default))
                    .Select(it => new Selector<ItemType>(it)).ToList();

        Characters = await Repository.GetAsync(default);
        RefreshCharacter();

        _editContext = new EditContext(Character);
        _editContext.OnFieldChanged += OnChanged;
        _isLoading = false;
    }

    public void IncreaseLevel()
    {
        ++Character.Level;
        _editContext.NotifyFieldChanged(_editContext.Field(nameof(Character.Level)));
    }

    public void Next()
    {
        if (Characters is null || (_selected < Characters.Count() - 1))
        {
            _selected++;
            RefreshCharacter();
        }
    }

    public void Previous()
    {
        if (_selected > 0)
        {
            _selected--;
            RefreshCharacter();
        }
    }

    private void RefreshCharacter()
    {
        Runes.Select<Api.Rune>(r => Character.Runes.Contains(r.Id));
        ItemTypes.Select<ItemType>(r => Character.Filters.ItemTypes.Contains(r.Id));
        StateHasChanged();
    }

    private void OnChanged(object sender, FieldChangedEventArgs args)
    {
        Console.WriteLine($"OnChange: {args.FieldIdentifier.FieldName}");
        Character.Runes = Runes.Where(r => r.Selected).Select(r => r.Value.Id).ToList();
        Character.Filters.ItemTypes = ItemTypes.Where(it => it.Selected).Select(it => it.Value.Id).ToList();
        Repository.SaveAsync(Character, default);
    }

    public async Task AddAsync()
    {
        var id = 0;
        if (Characters is not null && Characters.Any()) id = Characters.Max(c => c.Id) + 1;
        var character = new Character(id, new Filter());
        character.Runes = Enumerable.Empty<int>();
        var parameters = new ModalParameters()
                                .Add(nameof(NewCharacterModal.Character), character);
        var reference = ModalService.Show<NewCharacterModal>(string.Empty, parameters, new ModalOptions { HideHeader = true, DisableBackgroundCancel = true, HideCloseButton = true, Position = ModalPosition.Middle });
        if ((await reference.Result).Confirmed)
        {
            await Repository.SaveAsync(character, default);
            Characters = await Repository.GetAsync(default);
            _selected = Characters.Count() - 1;
            StateHasChanged();
        }
    }

    public async Task DeleteAsync()
    {
        var reference = ModalService.Show<DeleteCharacterModal>("Delete", new ModalParameters().Add(nameof(DeleteCharacterModal.Name), Character.Name), new ModalOptions { Position = ModalPosition.Middle });
        if ((await reference.Result).Confirmed)
        {
            await Repository.DeleteAsync(Character, default);
            Characters = await Repository.GetAsync(default);
            _selected = 0;
            StateHasChanged();
        }
    }

    public async Task SearchAsync()
    {
        RuneWords = await RequestSender.GetAsync<GetRuneWordsQuery, IEnumerable<Api.Responses.RuneWord>>(new GetRuneWordsQuery(Character.Filters.ItemTypes, Character.Filters.SocketFrom, Character.Filters.SocketTo, Character.Filters.MaxLevel), default);
        StateHasChanged();
    }

    public void OnMouseWheel(WheelEventArgs args)
    {
        Console.WriteLine($"MouseWheel - DeltaY: {args.DeltaY}");
        if (args.DeltaY > 0)
        {
            Next();
        }
        if (args.DeltaY < 0)
        {
            Previous();
        }
    }
}
